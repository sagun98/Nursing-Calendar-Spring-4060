<?php

function manager_redirect_menu() {
    
  $items = array();
  
  $items['manager/redirect'] = array( //this creates a URL that will call this form at "examples/form-example"
  
    'title' => 'Manager redirect Dashboard', //page title
    
    'description' => 'A redirection page for managing collisions',
    
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    
    'page arguments' => array('manager_redirect_form'), //put the name of the form here
    
    'access arguments' => array('view_collision_dashboard')
    
  );
  
  return $items;
  
}

function manager_redirect_mail($key, &$message, $params) {
    
    $course_name = $params['course_name']; 
    
    $course_id = $params['course_id'];
    
    $start_date = $params['start_date'];
    
    $end_date = $params['end_date'];
    
    switch ($key) {
      
        case 'accept':
        
            // Set headers etc
      
            $message['to'] = $params['email'];
      
            $message['subject'] = t('Your Event Was Accepted');
      
            $message['body'][] = t("Hello @username,", array('@username' => $params['username']));
      
            $message['body'][] = t("Your class for $course_name-$course_id from $start_date to $end_date was accepted.");
      
            break;
      
        case 'reject':
        
            // Set headers etc
      
            $message['to'] = $params['email'];
      
            $message['subject'] = t('Your Event Was Rejected');
      
            $message['body'][] = t('Hello @username,', array('@username' => $params['username']));
      
            $message['body'][] = t("Your class for $course_name-$course_id from $start_date to $end_date was rejected.");
      
            break;
      
        case 'edit':
        
            // Set headers etc
      
            $message['to'] = $params['email'];
      
            $message['subject'] = t('Your Event Has Been Edited');
      
            $message['body'][] = t('Hello @username,', array('@username' => $params['username']));
      
            $message['body'][] = t("Your class for $course_name-$course_id from $start_date to $end_date was edited.");
      
            break;
      
    }
  
}


function manager_redirect_form($form, &$form_state) {
    
    $node_id = $_GET['node_id'];

    if($_GET['event_type'] == 'collision') {
    
        $collision_id = $_GET['collision_id'];
        
        if($_GET['handler_type'] == 'Accept') {
            
            $res = db_query("SELECT nid, collision_id 
                             FROM collision
                             WHERE collision_id = '$collision_id'");
                     
            while($data = $res->fetchObject()) {
        
                if($data->nid != $node_id) {
                    
                    node_delete($data->nid);
                    
                }
        
            }
            
            $node = node_load($node_id);
            
            $node->status = 1;
            
            node_save($node);
    
            delete_all_collisions($collision_id);
        
        }
        
        else if($_GET['handler_type'] == 'Reject') {
    
            node_delete($node_id);
            
            delete_collision($node_id, $collision_id);
    
        }
        
        drupal_goto("manager/dashboard");
        
    }
    
    else if($_GET['event_type'] == 'request') {
        
        if($_GET['handler_type'] == 'Accept') {
            
            create_event($_GET['room_name'], $_GET['room_id'], $_GET['course_name'], $_GET['course_id'], $_GET['start_date'], $_GET['end_date']);
            
            delete_request($node_id);  
        
        }
        
        else if($_GET['handler_type'] == 'Reject') {
            
            delete_request($node_id);
    
        }
        
        drupal_goto("manager/dashboard/requests");
        
    }
    
    
    
    return $form;

}

function delete_all_collisions($collision_id) {
    
    $del = db_query("DELETE 
                     FROM collision
                     WHERE collision_id = '$collision_id'");
            
}

function delete_collision($node_id, $collision_id) {

    node_delete($node_id);
  
    $collisions_exist = FALSE;
            
    $del = db_query("DELETE 
                     FROM collision
                     WHERE nid = $node_id");
                     
    $res = db_query("SELECT nid, collision_id 
                     FROM collision
                     WHERE collision_id = '$collision_id'");
                     
    while($data = $res->fetchObject()) {
        
        if($res->rowCount() > explode('-', $data->collision_id)[1]) {
            
            $collisions_exist = TRUE;
            
        }
        
    }
    
    if(!$collisions_exist) {
        
        delete_all_collisions($collision_id);
        
    }
                     
}

function get_nid($tid, $start_time, $end_time, $uid, $crn) {

    $sel= db_query("SELECT n.uid, n.nid
                    FROM node AS n
                    JOIN field_data_field_roomname AS rn ON n.nid = rn.entity_id
                    JOIN field_data_field_time AS t ON n.nid = t.entity_id
                    JOIN field_data_field_course_id AS crn ON n.nid = crn.entity_id
                    WHERE n.status = 0
                    AND n.uid = $uid
                    AND n.type = 'submit_room_request'
                    AND rn.field_roomname_tid = $tid
                    AND '$start_time'= t.field_time_value
                	AND '$end_time'= t.field_time_value2
                    AND crn.field_course_id_value = $crn");
        	
	$selec = $sel->fetchObject();
	    
	return $selec->nid;
	    
}
    
    
?>