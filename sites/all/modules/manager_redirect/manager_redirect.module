<?php

function manager_redirect_menu() {
    
  $items = array();
  
  $items['manager/redirect'] = array( //this creates a URL that will call this form at "examples/form-example"
  
    'title' => 'Manager redirect Dashboard', //page title
    
    'description' => 'A redirection page for managing collisions',
    
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    
    'page arguments' => array('manager_redirect_form'), //put the name of the form here
    
    'access arguments' => array('view_collision_dashboard')
    
  );
  
  return $items;
  
}

function build_message($key, $params) {
    
    $room_name = $params['room_name'];
    
    $course_name = $params['course_name']; 
    
    $course_id = $params['course_id'];
    
    $start_date = $params['start_date'];
    
    $end_date = $params['end_date'];
    
    $username = $params['username'];
    
    switch ($key) {
      
        case 'Accept':

            $message['subject'] = t('Your Event Was Accepted');
      
            $message['body'] = t("Hello $username,\n");
      
            $message['body'] .= t("Your class in $room_name for $course_name-$course_id from $start_date to $end_date was accepted.");
      
            break;
      
        case 'Reject':
        
            $message['subject'] = t('Your Event Was Rejected');
      
            $message['body'] = t("Hello $username,\n");
      
            $message['body'] .= t("Your class in $room_name for $course_name-$course_id from $start_date to $end_date was rejected.");
      
            break;
            
        case 'Delete':
        
            $message['subject'] = t('Your Event Was Deleted');
      
            $message['body'] = t("Hello $username,\n");
      
            $message['body'] .= t("Your class in $room_name for $course_name-$course_id from $start_date to $end_date was deleted.");
      
            break;
      
        case 'Edit':

            $message['subject'] = t('Your Event Has Been Edited');
      
            $message['body'] = t("Hello $username,\n");
      
            $message['body'] .= t("Your class in $room_name for $course_name-$course_id from $start_date to $end_date was edited.");
      
            break;
      
    }
    
    return $message;
  
}

function manager_redirect_drupal_mail($from = 'default_from', $to, $subject, $message) {
  $my_module = 'manager_redirect';
  $my_mail_token = microtime();
  if ($from == 'default_from') {
    // Change this to your own default 'from' email address.
    $from = variable_get('system_mail', 'example@nursing-calendar-spring-4060-sagun98.c9users.io');
  }
  $message = array(
    'id' => $my_module . '_' . $my_mail_token,
    'to' => $to,
    'subject' => $subject,
    'body' => array($message),
    'headers' => array(
      'From' => $from, 
      'Sender' => $from, 
      'Return-Path' => $from,
    ),
  );
  $system = drupal_mail_system($my_module, $my_mail_token);
  $message = $system->format($message);
  if ($system->mail($message)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function manager_redirect_form($form, &$form_state) {
    
    global $user;
    
    $node_id = $_GET['node_id'];
    
    $params['room_name'] = $_GET['room_name'];
            
    $params['course_name'] = $_GET['course_name']; 
    
    $params['course_id'] = $_GET['course_id'];
    
    $params['start_date'] = $_GET['start_date'];
    
    $params['end_date'] = $_GET['end_date'];
        
    $params['username'] = getUsername($_GET['uid']);
    
    $to = variable_get('system_mail', getEmail($_GET['uid']));
    
    $from = variable_get('system_mail', $user->mail);
    
    $message = build_message($_GET['handler_type'], $params);
    
    $key = $_GET['handler_type'];
    
    $subject = $message['subject'];
    
    $body = $message['body'];

    if($_GET['event_type'] == 'collision') {
    
        $collision_id = $_GET['collision_id'];
        
        if($_GET['handler_type'] == 'Accept') {
            
            $res = db_query("SELECT nid, collision_id 
                             FROM collision
                             WHERE collision_id = '$collision_id'");
                     
            while($data = $res->fetchObject()) {
        
                if($data->nid != $node_id) {
                    
                    node_delete($data->nid);
                    
                }
        
            }
            
            $node = node_load($node_id);
            
            $node->status = 1;
            
            node_save($node);
    
            delete_all_collisions($collision_id);
            
            drupal_set_message("Event was accepted");
        
        }
        
        else if($_GET['handler_type'] == 'Reject') {
    
            node_delete($node_id);
            
            delete_collision($node_id, $collision_id);
            
            drupal_set_message("Event was rejected");
    
        }
            
        //$mailResult = manager_redirect_drupal_mail($from, $to, $subject, $body);
        
        drupal_goto("staff/dashboard/conflicts");
        
    }
    
    else if($_GET['event_type'] == 'request') {
        
        if($_GET['handler_type'] == 'Accept') {
            
            create_event($_GET['room_name'], $_GET['room_id'], $_GET['course_name'], $_GET['course_id'], $_GET['start_date'], $_GET['end_date'], TRUE);
            
            delete_request($node_id);  
            
            drupal_set_message("Event was accepted");
        
        }
        
        else if($_GET['handler_type'] == 'Reject') {
            
            delete_request($node_id);
            
            drupal_set_message("Event was rejected");
    
        }
        
       // $mailResult = manager_redirect_drupal_mail($from, $to, $subject, $body);
        
        drupal_goto("staff/dashboard/requests");
        
    }
    
    else if($_GET['event_type'] == 'event') {
        
        delete_event($node_id);

        //$mailResult = manager_redirect_drupal_mail($from, $to, $subject, $body);
        
        drupal_set_message("Event was deleted");

        drupal_goto("staff/dashboard/events");
        
    }
    
    return $form;

}

function delete_all_collisions($collision_id) {
    
    $del = db_query("DELETE 
                     FROM collision
                     WHERE collision_id = '$collision_id'");
            
}

function delete_collision($node_id, $collision_id) {

    node_delete($node_id);
  
    $collisions_exist = FALSE;
            
    $del = db_query("DELETE 
                     FROM collision
                     WHERE nid = $node_id");
                     
    $res = db_query("SELECT nid, collision_id 
                     FROM collision
                     WHERE collision_id = '$collision_id'");
                     
    while($data = $res->fetchObject()) {
        
        if($res->rowCount() > explode('-', $data->collision_id)[1]) {
            
            $collisions_exist = TRUE;
            
        }
        
    }
    
    if(!$collisions_exist) {
        
        delete_all_collisions($collision_id);
        
    }
                     
}

function getEmail($user_id) {
    
    $res = db_query("SELECT mail
             FROM users 
             WHERE uid = $user_id");
             
    if($data = $res->fetchObject()) {
        
        return $data->mail;
        
    }
    
}

function getUsername($user_id) {
    
    $res = db_query("SELECT name
             FROM users 
             WHERE uid = $user_id");
             
    if($data = $res->fetchObject()) {
        
        return $data->name;
        
    }
    
}

?>