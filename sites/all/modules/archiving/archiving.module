<?php

function archiving_menu() {
  $items = array();
  
  $items['admin/archive'] = array(
    'title' => 'Archive',
    'description' => 'A dashboard for archiving',
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('archiving_form'), //put the name of the form here
    'access arguments' => array('view_staff_dashboard'),
  );
  return $items;
}

function archiving_form($form, &$form_state) {
    display_classes();
     $form['actions']['submit'] = array(
      '#prefix' => ' Clicking this button will register all the classes as last semester',
      '#type' => 'submit',
      '#value' => t('Register all class from last semester'),
    );
    //Check out Gitter
     $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Register all class from last semester'),
    );
      
  return $form;
}


function display_classes(){
    global $user;
    $month =  ((int)date("m"));
    dpm ((int)date("Y"));
    dpm ((int)date("d"));
    dpm ($user->uid);
    $user_id = $user->uid;
    $nid = array();
    $start_date = array();
    $end_date = array();
    $stmtt = db_query("SELECT nid FROM node WHERE uid=$user_id");
        while ($data = $stmtt->fetchObject()){
            $nid[] = $data->nid;
            $node=node_load($data->nid);      
            $start_date[] = $node->field_time['und'][0]['value'];
            $end_date[] = $node->field_time['und'][0]['value2'];
            $start = $node->field_time['und'][0]['value'];
            
            $split_array=explode(" ",$start);
            $front = $split_array[0];
            $backk = $split_array[1];
            $mdy = explode ("-",$front);
            dpm ($mdy);
            dpm ($mdy[0]);
            dpm ($mdy[1]);
            dpm ($mdy[2]);
            if ($month<= 6){
                
            }
            else {
                
            }
        }
    }

function archiving_form_submit($form, &$form_state) {
    drupal_set_message("No classes found for last semester.","warning");
}


  
 

function create_save_new_node_archiving(&$form, &$form_state,$room_name,$start_date,$end_date, $course_name, $course_id){
  global $user;
  $current_status=$_GET["status"];
  //get_one_status($_GET["start_date"], $_GET["end_date"]);
  
  $newNode = new stdClass();
  $newNode->type = 'submit_room_request';
  node_object_prepare($newNode);
  $newNode->title = "Room_request";
  $newNode->uid = $user->uid;
  $newNode->created = strtotime("now");
  $newNode->changed = strtotime("now");
  
  if ($current_status!='Available'){
    $newNode->status = 0;
  }
  else{
    $newNode->status = 1;
  }
  $newNode->comment = 2; // This node can create and view comments
  $newNode->promote = 0;
  $newNode->moderate = 0;
  $newNode->sticky = 0;
  $newNode->language = 'und';
  
  
  
  $stmt = db_query("SELECT tid FROM taxonomy_term_data WHERE name ='$room_name'");
  $data = $stmt->fetchObject();
  $tid = $data -> tid;
  $newNode->field_roomname['und'][0]['tid']= $tid;
  $newNode->field_room_type_for_filter['und'][0]['value'] = trim((explode("-",$room_name)[1]));;
  $newNode->field_time['und'][0]['value']= $start_date;
  $newNode->field_time['und'][0]['value2']= $end_date;
  $newNode->field_course_names['und'][0]['value'] = $course_name;
  $newNode->field_course_id['und'][0]['value'] = $course_id;
  node_save($newNode);
  
  
  if ($current_status =='Available'){
    drupal_set_message("Successfully requested $room_name");
  }
  
  elseif ($current_status =='Locked'){
     drupal_set_message("$room_name is currently locked. Manager will handlle this request",'warning');
  }
  
  else {
    drupal_set_message("Conflict with $room_name. Manager will resolve this conflict",'warning');
    drupal_set_message("$room_name will show up in your calendar after your request is accepted. Go to Collided Rooms for more details",'warning');
  }
  
  drupal_goto("admin/staff-dashboard");

}
?>