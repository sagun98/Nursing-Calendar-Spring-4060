<?php

function staff_dashboard_menu() {
  
  $items = array();
  
  $items['staff/dashboard'] = array(
    'title' => 'Staff Dashboard',
    'description' => 'A dashboard for staff',
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('staff_dashboard_form'), //put the name of the form here
    'access arguments' => array('view_staff_dashboard'),
  );
  

  $items['staff/dashboard/%ctools_js'] = array(
    'page callback' => 'staff_dashboard_callback',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  // For the default local task, we need very little configuration, as the
  // callback and other conditions are handled by the parent callback.
  $items['staff/dashboard/default'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Room Scheduling',
    'description' => 'A dashboard for staff',
    'weight' => 1,
    
  );
  
  $items['staff/dashboard/collisions'] = array( //this creates a URL that will call this form at "examples/form-example"
    'type' => MENU_LOCAL_TASK,
    'title' => 'Collisions', //page title
    'description' => 'A dashboard for staff displaying all the collisions',
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('staff_collision_form'), //put the name of the form here
    'access arguments' => array('view_collision_dashboard'),
    'weight' => 2,  
  );
  
  return $items;
  
}

function _staff_dashboard_make_link() {
  
  return '<div id="schedule-link">' . l('Schedule Course', 'staff/dashboard/nojs', array('attributes' => array('class' => 'ctools-use-modal'))) . '</div>';
  
}

function get_crns_by_course($courses) {
  
  $allCRNS = array();

  foreach($courses as $course) {
  
    $res = db_query("SELECT CourseName, CourseID
            FROM COURSE
            WHERE CourseName = '$course'");

    while($data = $res -> fetchObject()) {
      
      $allCRNS[$data -> CourseName . "-" . $data -> CourseID] = $data -> CourseName . "-" . $data -> CourseID;
      
    } 
    
  }

  return $allCRNS;
  
}

function check_role($userRoles, $role) {
  
  $isRole = false;
  
    foreach($userRoles as $user) {
      
      if($user == $role) {
        
        $isRole = true;
        
      }
      
    }
    
    return $isRole;
}

function get_courses_current_user(){
	
    $courses= array();
	
    global $user;
    
    if(check_role($user -> roles, "administrator") || check_role($user -> roles, "manager")) {
    
      $result = db_query("SELECT CourseID, CourseName, Semester FROM COURSE");
    
    }
    
    else {
      
      $result = db_query("SELECT C.CourseID, C.CourseName, C.Semester
                          FROM LEAD L LEFT JOIN COURSE C ON C.CourseName = L.CourseName
                          JOIN field_data_field_cwid AS fdfc ON CWID = fdfc.field_cwid_value  
                          JOIN users AS U ON fdfc.entity_id = U.uid 
                          AND U.uid = '$user->uid'");
    
    }
    
	  // Looping for filling the table rows
	  while($data = $result->fetchObject()){
	    
	    $course_name = $data->CourseName;
	    
	    $courses[$course_name] = $course_name;
	    
	  }
	  
	  return $courses;
}

function getStatus($id, $start_time, $end_time) {
  
    $status = true;
    
    $lock = db_query("SELECT * FROM field_revision_field_lock_date_time WHERE entity_id=(SELECT MAX(entity_id) FROM field_revision_field_lock_date_time)");
    
    $lock_data = $lock->fetchObject();
    
    $lock_date = $lock_data->field_lock_date_time_value;
    
    $current_date = date('Y-m-d H:i:s', time());
    
    $lock_date = date('Y-m-d H:i:s',strtotime('-5 hour',strtotime($lock_date)));
    
    if (strtotime($lock_date) > strtotime($current_date)) {
      
      $res = db_query("SELECT entity_id,
              field_time_value, field_time_value2 
              FROM field_data_field_time AS time NATURAL JOIN field_data_field_roomname AS room, node as n
              WHERE n.status = 1 
              AND room.field_roomname_tid = " . $id);
              
      while($data = $res->fetchObject()) {
        
  	    $start = $data -> field_time_value;
  	    
  	    $end = $data -> field_time_value2;
  	    
  	    if(($start_time >= $start && $start_time <= $end) || 
  	        ($end_time <= $end && $end_time >= $start)) {
  	          
  	            $status = false;
  	            
  	        }
  	        
  	  }
  	  
      if($status) {
        
          return 'Available';
          
      }
      
      else {   
        
          return 'Booked';
          
      }
      
    }
    
    else {
      
    return "Locked";
    
  }
    
}

function createStaffDashboardTable($form, &$form_state) {
    
	$courses = get_courses_current_user();
	
	$form['course'] = array (
	  
	    '#type' => 'select',
	    
	    '#options' => array_merge(array('Select a Course' => 'Select a Course'), $courses),
	    
	   // '#attributes' => array('onchange' => 'hideUnhideButton()'),
	    
	    '#ajax' => array(
	      
	        'callback' => 'staff_dashboard_select_callback',
	      
	      ),
	  
	  );
	
	$form['container'] = array(
	  
	  '#type' => 'container',
	  
		'#states' => array(

      // Hide the settings when the cancel notify checkbox is disabled.

      'invisible' => array(

        ':input[name="course"]' => array(
         
          'value' => t('Select a Course'),
         
        ),
       
      ),
      
    ),
	  
	 );
	
	$form['container']['submit'] = array (
	  
	  '#type' => 'item',

		'#markup' => _staff_dashboard_make_link(),
	  
	);
	  
	return $form;
	
}

function staff_dashboard_callback($ajax) {
  
  if ($ajax) {
    
    ctools_include('ajax');
    
    ctools_include('modal');

    $form_state = array(
      
      'ajax' => TRUE,
      
      'title' => t('Schedule Classes'),
      
    );

    // Use ctools to generate ajax instructions for the browser to create
    // a form in a modal popup.
    
    $output = ctools_modal_form_wrapper('schedule_form', $form_state);

    // If the form has been submitted, there may be additional instructions
    // such as dismissing the modal popup.
    
    if (!empty($form_state['ajax_commands'])) {
      
      $output = $form_state['ajax_commands'];
      
    }

    // Return the ajax instructions to the browser via ajax_render().
    
    print ajax_render($output);
    
    drupal_exit();
    
  }
  
  else {
    
    return drupal_get_form('schedule_form');
    
  }
  
}

function staff_dashboard_select_callback($form, $form_state) {
  
  $_SESSION['Selected-Course'] = $form_state['values']['course'];
  
}

function staff_dashboard_form($form, &$form_state) {
  
  ctools_include('modal');
  
  ctools_modal_add_js();
  
	$form = createStaffDashboardTable($form, $form_state);

	return $form;

}

function staff_dashboard_form_submit($form, &$form_state) {
  
}

?>