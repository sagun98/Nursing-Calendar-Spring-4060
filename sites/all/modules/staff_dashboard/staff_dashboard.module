<?php
function staff_dashboard_form_alter(&$form, &$form_state, $form_id) {

   //dpm($form_id);
    if ($form_id=="staff_dashboard_node_form"){
        $form['title']['#type'] = 'hidden';
        $form['title']['#value'] = "Search Rooms For Request";
        select_every_room();
        staff_dashboard_form($form,$form_state);
        echo "<hr />";
  }
}

function select_every_room(){
    $res = db_query("SELECT name 
            FROM taxonomy_term_data");
             $result = $res->fetchAll();
             foreach ($result as $value) {
               dpm($value->name);
             };
}

function staff_dashboard_menu() {
  
 // if ($GLOBALS['user']->roles =="admin"){
  $items = array();

  $items['staff/dashboard'] = array( //this creates a URL that will call this form at "examples/form-example"
    'title' => 'Staff Dashboard', //page title
    'description' => 'A dashboard for staff',
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('staff_dashboard_form'), //put the name of the form here
    'access arguments' => array('view_staff_dashboard')
  );
  return $items;
  }
//}



function staff_dashboard_form($form, &$form_state) {
// if ($GLOBALS['user']->roles =="administrator" || $GLOBALS['user']->role == "manager" || $GLOBALS['user']->role=="staff"){

$format = 'Y-m-d H:i';
$timezone= drupal_get_user_timezone();
$form['start_date'] = array(
    '#type' => 'date_popup',
    '#title' => t('Start Time'),
    '#default_value' => date("Y-m-d H:i", round(strtotime("now") / 900) * 900),
    '#date_format' => $format,
     '#required' => TRUE,
    '#date_label_position' => 'within',
    '#date_timezone' => $timezone,
    '#date_increment' => 15,
    '#date_year_range' => '-3:+3',
    // Use 'timepicker' option provided by the Date Popup Timepicker module.
    // #timepicker property itself is provided by the Date Popup module.
    '#timepicker' => 'timepicker',
    // New #timepicker_options property handled by the Date Popup Timepicker
    // module and lets to customize timepicker options.
    '#timepicker_options' => array(
      'rows' => 6,
      'minutes' => array(
        'starts' => 0,
        'ends' => 56,
        'interval' => 4,
      ),
      'showCloseButton' => TRUE,
      'closeButtonText' => t('Close'),
      ),
      
    );
    
  $form['end_date'] = array(
    '#type' => 'date_popup',
    '#title' => t('End Time'),
    '#default_value' => date("Y-m-d H:i", round(strtotime("+1 hour") / 900) * 900),
    '#date_format' => "H:i",
    '#date_label_position' => 'within',
    '#date_timezone' => $timezone,
     '#required' => TRUE,
    '#date_increment' => 15,
    '#date_year_range' => '-3:+3',
    '#timepicker' => 'timepicker',
    '#timepicker_options' => array(
      'rows' => 6,
      'minutes' => array(
        'starts' => 0,
        'ends' => 56,
        'interval' => 4,
      ),
      'showCloseButton' => TRUE,
      'closeButtonText' => t('Close'),
      ),
      
    );


//         NURS 2000 - Nursing Concepts|NURS 2000 - Nursing Concepts
//         NURS 2080 - Basic Principles of Pharmacology|NURS 2080 - Basic Principles of Pharmacology
//         NURS 2004 - Health Assessment|NURS 2004 - Health Assessment
//         NURS 2009 - Fundamentals of Professional Nursing Practice|NURS 2009 - Fundamentals of Professional Nursing Practice
//         NURS 2011 - Introduction to Gerontological Nursing|NURS 2011 - Introduction to Gerontological Nursing
//         NURS 2013 - Computing for Nurses|NURS 2013 - Computing for Nurses
//         NURS 3009 - Adult Health Nursing 1|NURS 3009 - Adult Health Nursing 1
//         NURS 3010 - Mental Health Nursing|NURS 3010 - Mental Health Nursing
//         NURS 3011 - Nursing Synthesis 1|NURS 3011 - Nursing Synthesis 1
//         NURS 3028 - Adult Health Nursing 2|NURS 3028 - Adult Health Nursing 2
//         NURS 3029 - Maternal Child Health Nursing|NURS 3029 - Maternal Child Health Nursing
//         NURS 3030 - Nursing Synthesis 2|NURS 3030 - Nursing Synthesis 2
//         NURS 4000 - Adult Health Nursing 3|NURS 4000 - Adult Health Nursing 3
//         NURS 4001 - Nursing Research: Evidence Based Practice|NURS 4001 - Nursing Research: Evidence Based Practice
//         NURS 4002 - Nursing Synthesis 3|NURS 4002 - Nursing Synthesis 3
//         NURS 4066 - Nursing Management|NURS 4066 - Nursing Management
//         NURS 4067 - Public Health Nursing|NURS 4067 - Public Health Nursing


    // Get all the course name for the current user
    $course_name = get_courses_current_user();
  //  dpm($course_name);
    
    $form['selected'] = array(
      '#type' => 'select',
      '#title' => t('Course Name (Optional)'),
      '#options' => $course_name,
      '#default_value' => "Select Your Course Name",
      '#description' => t('Enter the name of the course that you want to book classroom'),
  );
  
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Search for Rooms'),
    );
      
    if (!empty($form_state['results_table'])) {
      $form['results_table'] = array('#markup' => $form_state['results_table']);
  }
  return $form;
}
//}


function get_courses_current_user(){
    $courses= array();
    $semester= array();
    global $user;
    $result = db_query("SELECT C.CourseID, C.CourseName, C.Semester
                        FROM COURSE AS C, TEACHES AS T, USER AS U
                        WHERE C.CourseID = T.CourseID
                        AND T.CWID = U.CWID
                        AND U.Username =  '$user->name'");
	  // Looping for filling the table rows
	  while($data = $result->fetchObject()){
	    $course_name = $data->CourseName;
	    $courses[$course_name]=$course_name;
	    // $courses[]=array($course_name => $course_name); 
	    //$semester['$data-> Semester'] = $data-> Semester;
	  }
	  
	  return $courses;
    
    
}
function getStatus($id, $start_time, $end_time) {
    $status = true;
    $res = db_query("SELECT entity_id,
            field_time_value, field_time_value2 
            FROM field_data_field_time AS time NATURAL JOIN field_data_field_roomname AS room
            WHERE room.field_roomname_tid = " . $id);
    while($data = $res->fetchObject()){
	    $start = $data -> field_time_value;
	    $end = $data -> field_time_value2;
	    if(($start_time >= $start && $start_time <= $end) || 
	        ($end_time <= $end && $end_time >= $start)) {
	            $status = false;
	        }
	  }
    if($status) {
        return 'Available';
    }
    else {   
        return 'Booked';
    }
}

function getAllClasses($start_time, $end_time,$course_name, &$form_state) {
    $output = "";
    $end_time = substr($start_time, 0, (strrpos($start_time, " "))) . " " . $end_time;
    $res = db_query("SELECT name, tid FROM taxonomy_term_data");
	  $header = array('Room Name', 'Status', 'Book Room');
	  $rows = array();
	  // Looping for filling the table rows
	  while($data = $res->fetchObject()){
	       $status = getStatus($data->tid, $start_time, $end_time);
	       if($status == "Available") {
	         $book = "Book Room";
	       }
	       else {
	         $book = "Request";
	       }  
  	     $rows[] = array(
		     $data->name,
		     $status,
		     l(
              t($book), 
              '/node/add/submit-room-request', 
              array(
                'attributes' => array(
                  'class' => array(
                    'request', 
                    'request-class',
                  ), 
                  'id' =>'request',
                ),
                'query' => array(
                  'room_name' => $data->name,
                  'start_date' => $start_time, 
                  'end_date' => $end_time,
                  'status' => $status,
                  'course_name' => $course_name,
                ), 
                'html' => TRUE,
                )
              )
            );
        }

	  // Output of table with the paging
	  $output .= theme_table(
		    array(
		      "header" => $header,
		      "rows" => $rows,
		      "attributes" => array(""),
		      "sticky" => true, // Table header will be sticky
		      "caption" => "",
		      "colgroups" => array(),
		      "empty" => t("Table has no data!") // The message to be displayed if table is empty
		    )
	  );
	  return $output;
}

function form_example_form_validate($form, &$form_state) {
}

function staff_dashboard_form_submit($form, &$form_state) {
	$form_state['results_table'] = getAllClasses($form_state['values']['start_date'], $form_state['values']['end_date'],$form_state['values']['selected'],$form_state);
  $form_state['rebuild'] = TRUE;
}

?>