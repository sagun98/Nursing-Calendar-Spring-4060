<?php

/**Function that returns latest nodeid 
function get_latest_nodeid(){
    $r = db_select('node','n')
    ->fields('n')
    ->orderBy('created','DESC')
    ->execute()
    ->fetchObject();
    return (int)$r->nid;
}

function get_specific_room_to_update(){
    $index=1;
    //dpm(get_latest_nodeid());
    $latest_node_id= (string)get_latest_nodeid();
    
    $res = db_query("SELECT name 
            FROM taxonomy_term_data AS ttd, field_data_field_roomname AS froom
            WHERE froom.field_roomname_tid = ttd.tid 
                AND froom.entity_id=$latest_node_id");
 
    $result = $res->fetchField();
    
    return(trim((explode("-",$result)[$index])));
}

function update_room_type(){
   // $room_name= get_specific_room_to_update();
    $latest_node_id= get_latest_nodeid()+"";
   
    $res = db_query("UPDATE field_data_field_room_type_for_filter
            SET field_room_type_for_filter_value = '$room_name'
            WHERE field_data_field_room_type_for_filter.entity_id = '$latest_node_id'");
}
*/

function insert_other_collided_class($room_name, $room_id, $course_name, $course_id, $start_date, $end_date) {
    
    global $user;
    
    $current_status = getStatus($room_id, $start_date, $end_date);

    $uid = (int)$user->uid;

    if($current_status == "Booked") {

        $res = db_query("SELECT node.uid, node.nid, user.name, courseName.field_course_names_value, courseID.field_course_id_value
                         FROM node AS node 
                         JOIN field_data_field_roomname AS room ON node.nid = room.entity_id
                         JOIN field_data_field_time AS time ON node.nid = time.entity_id
						 JOIN users AS user ON node.uid = user.uid
						 JOIN field_data_field_course_names AS courseName ON node.nid = courseName.entity_id
						 JOIN field_data_field_course_id AS courseID ON node.nid = courseID.entity_id
                         WHERE node.status = 1
                         AND node.type = 'submit_room_request'
                         AND room.field_roomname_tid = $room_id
                         AND (('$start_date' >= time.field_time_value
    	                 AND '$start_date' <= time.field_time_value2)
      	                 OR ('$end_date' <= time.field_time_value2
    	                 AND '$end_date' >= time.field_time_value))");
    
        if($fetch_data = $res->fetchObject()) {
    
			$main_uid = $fetch_data->uid;
				
			$main_nid = $fetch_data->nid;
			
			$main_username = $fetch_data->name;
					
			$main_course_name = $fetch_data->field_course_names_value;
			
			$main_course_id = $fetch_data->field_course_id_value;
				
			$enter_flag = false;
				
			$stmt1 = db_query("SELECT collision_id FROM collision where flag = 1");
				
			while($data = $stmt1->fetchObject()) {
					
				if ($main_nid == $data->collision_id) {
			  
					$enter_flag = true;
			
				}
				
			}
		
			if (!$enter_flag) {
		   
				$sql = "INSERT INTO collision (CRN, user_id, user_name, course_name, room_name, room_id, start_time, end_time, nid, collision_id, flag) VALUES ($main_course_id, $main_uid, '$main_username', '$main_course_name', '$room_name', $room_id, '$start_date', '$end_date', '$main_nid', '$main_nid', 1)";
				
				$result = db_query($sql);
			  
			}
			
		}
		
		return $main_nid;
		
    }
    
}

function custom_views_query_alter(&$view, &$query) {
  // (Example assuming a view with an exposed filter on node title.)
  // If the input for the title filter is a positive integer, filter against
  // node ID instead of node title.
  if ($view->name == 'staff_collision_dashboard') {
    // Traverse through the 'where' part of the query.
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {

        // If this is the part of the query filtering on title, change the
        // condition to filter on node ID.
        if ($condition['field'] == 'node.title') {
          $condition = array(
            'field' => 'node.nid',
            'value' => $view->exposed_raw_input['title'],
            'operator' => '=',
          );
        }
      }
    }
  }
  
  else if ($view->name == 'book_room_calendar') {
      
    drupal_add_js(drupal_get_path('module', 'custom') . '/calendarJS.js');
    
    global $user;
    
    $arrayOfIds[] = array();
    
    $count = 0;

    if(check_role($user -> roles, "administrator") || check_role($user -> roles, "manager") 
        || check_role($user -> roles, "staff") || check_role($user -> roles, "lead")) {
 
        $res = db_query("SELECT fdfcn.entity_id
                         FROM COURSE 
                         JOIN field_data_field_course_names as fdfcn ON CourseName = fdfcn.field_course_names_value");
    
    }

    else if(check_role($user -> roles, "student")) {

        $res = db_query("SELECT fdfcn.entity_id
                         FROM USER NATURAL JOIN TAKES NATURAL JOIN COURSE 
                         JOIN field_data_field_cwid AS fdfc ON CWID = fdfc.field_cwid_value  
                         JOIN users AS U ON fdfc.entity_id = U.uid 
                         JOIN field_data_field_course_names as fdfcn ON CourseName = fdfcn.field_course_names_value
                         WHERE U.uid = '$user->uid'");
                        
    }
           
    while($data = $res->fetchObject()){
        
	   $arrayOfIds[$count] = array(
	       
	        $data -> entity_id
	        
	   );
	    
	   $count++;
    }
    
    $query->add_where(1,'node.nid', $arrayOfIds, 'IN');

  }
  
  else if ($view->name == 'manger_calendar_view')
  
  {
      
    drupal_add_js(drupal_get_path('module', 'custom') . '/calendarJS.js');
    
  }
  
}

function custom_form_alter(&$form, &$form_state, $form_id) {
    
    //dpm ($form_id);
    global $user;
    
    //dpm(implode(',', $user->roles));  
    if ($form_id == "manager_lock_date_time_node_form") {
        
        $form['title']['#type'] = 'hidden';
        
        $form['title']['#value'] = "Lock Time";
        
        $form['actions']['submit']['#value'] = 'Set Lock Time';
        
    }
    
   /** //If clause for the submit_room_request form
    else if ($form_id == "submit_room_request_node_form") {
        
        $form['title']['#type'] = 'hidden';
        
        $form['title']['#value'] = "Room Request";
        
        $form['actions']['submit']['#value'] = 'Request Room';
        
        // Keeps the room type as NULL for the default and later updates its value 
        $form['field_room_type_for_filter']['#type'] = 'hidden';
        
        $form['#submit'][] = 'custom_form_submit';
 
        //Inserts the collided classrooms in collision table with their current userid
        if (check_role($user->roles, "lead") || check_role($user->roles, "manager") || check_role($user->roles, "administrator") || check_role($user->roles, "staff")) {
           
          // create_event($form, $form_state, $room_name, $room_id, $course_name, $course_id, $start_date, $end_date);
           
        }
        
    }    */
    
    else if ($form_id == "search_node_form") {
        
        $form['title']['#type'] = 'hidden';
        
        //Changes save buttom name to search
        $form['actions']['submit']['#value'] = 'Search rooms';  
        
  }
  
}

function create_save_new_node($room_name, $room_id, $course_name, $course_id, $start_date, $end_date, $collision_id) {
    
  global $user;
  
  $current_status = getStatus($room_id, $start_date, $end_date);
  
  $newNode = new stdClass();
  
  $newNode->type = 'submit_room_request';
  
  node_object_prepare($newNode);
  
  $newNode->title = "$course_name";
  
  $newNode->uid = $user->uid;
  
  $newNode->created = strtotime("now");
  
  $newNode->changed = strtotime("now");
  
  if ($current_status != 'Available') {
    
    //Sets node to unpublished
    
    $newNode->status = 0;

  }
  
  else {
    
    //Sets node to published
    
    $newNode->status = 1;
    
    drupal_set_message("Successfully requested $room_name");
    
  }

  $newNode->comment = 2; // This node can create and view comments
  
  $newNode->promote = 0;
  
  $newNode->moderate = 0;
  
  $newNode->sticky = 0;
  
  $newNode->language = 'und';
  
  $newNode->field_roomname['und'][0]['tid']= $room_id;
  
  $newNode->field_room_type_for_filter['und'][0]['value'] = trim((explode("-",$room_name)[1]));;
  
  $newNode->field_time['und'][0]['value']= $start_date;
  
  $newNode->field_time['und'][0]['value2']= $end_date;
  
  $newNode->field_course_names['und'][0]['value'] = $course_name;
  
  $newNode->field_course_id['und'][0]['value'] = $course_id;
  
  node_save($newNode);
  
  $user_id = $newNode->uid;
  
  if($current_status == 'Booked') {
      
        $res = db_query("SELECT name from users where uid = $user_id");
            
        if($data = $res->fetchObject()) {
            
            $user_name = $data->name;
        
            $sql = "INSERT INTO collision (CRN, user_id, user_name, course_name, room_name, room_id, start_time, end_time, collision_id, nid, flag) VALUES ($course_id, $user_id, '$user_name', '$course_name', '$room_name', $room_id, '$start_date', '$end_date', '$collision_id', $newNode->nid, 0)";
        
            $result = db_query($sql);
        
            drupal_set_message("Conflict with $room_name. Manager will resolve this conflict", 'warning');
    
            drupal_set_message("$room_name will show up in your calendar after your request is accepted. Go to Collided Rooms for more details", 'warning');
        
        }
        
        else {
            
            drupal_set_message("Could not get user name", 'error');
            
        }   
        
   }
    
    else if($current_status == 'Locked') {
    
        $res = db_query("SELECT name from users where uid = $user_id");
            
        if($data = $res->fetchObject()) {
            
            $user_name = $data->name;
        
            $sql = "INSERT INTO REQUESTS (nid, user_id, user_name, CRN, course_name, room_name, room_id, start_time, end_time) VALUES ($newNode->nid, $user_id, '$user_name', $course_id, '$course_name', '$room_name', $room_id, '$start_date', '$end_date')";
        
            $result = db_query($sql);
        
            drupal_set_message("$room_name is currently locked. Manager will handlle this request", 'warning');
        
        }
  
    }

}

function create_event($room_name, $room_id, $course_name, $course_id, $start_date, $end_date) {

    $collision_id = insert_other_collided_class($room_name, $room_id, $course_name, $course_id, $start_date, $end_date);

    create_save_new_node($room_name, $room_id, $course_name, $course_id, $start_date, $end_date, $collision_id);
    
}

?>