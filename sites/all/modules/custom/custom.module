<?php

/**
 * Implements hook_query_alter
 *
 * Modifies the view's default query based on the view
 */
 
function custom_views_query_alter(&$view, &$query) {
  // (Example assuming a view with an exposed filter on node title.)
  // If the input for the title filter is a positive integer, filter against
  // node ID instead of node title.
  if ($view->name == 'staff_collision_dashboard') {
    // Traverse through the 'where' part of the query.
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {

        // If this is the part of the query filtering on title, change the
        // condition to filter on node ID.
        if ($condition['field'] == 'node.title') {
          $condition = array(
            'field' => 'node.nid',
            'value' => $view->exposed_raw_input['title'],
            'operator' => '=',
          );
        }
      }
    }
  }
  
  //Checks if view is for the calendar
  else if ($view->name == 'calendar') {
      
    //Adds calendarJS to the calendar view
    drupal_add_js(drupal_get_path('module', 'custom') . '/calendarJS.js');
    
    //Gets current user object
    global $user;
    
    $arrayOfIds[] = array();
    
    $count = 0;
    
    //Checks to make sure user is not a student
    if(check_role($user -> roles, "administrator") || check_role($user -> roles, "manager") 
        || check_role($user -> roles, "staff") || check_role($user -> roles, "lead")) {
        
        //Selects all courses
        $res = db_query("SELECT id.entity_id
                         FROM COURSE 
                         JOIN field_data_field_course_id as id ON CourseId = id.field_course_id_value");
    
    }
    
    //Checks if user is a student
    else if(check_role($user -> roles, "student")) {
        
        //Only selects courses the student is in
        $res = db_query("SELECT id.entity_id
                         FROM USER NATURAL JOIN TAKES NATURAL JOIN COURSE 
                         JOIN field_data_field_cwid AS cwid ON CWID = cwid.field_cwid_value  
                         JOIN users AS U ON cwid.entity_id = U.uid 
                         JOIN field_data_field_course_id as id ON CourseId = id.field_course_id_value
                         WHERE U.uid = '$user->uid'");
                        
    }
    
    //Loops through the courses getting the node id for each course
    while($data = $res->fetchObject()){
        
	   $arrayOfIds[$count] = array(
	       
	        $data -> entity_id
	        
	   );
	    
	   $count++;
    }
    
    //Builds a condition to check if the node id is in the array or if the node is of type feed_item
    $condition = db_or()->condition('node.nid', $arrayOfIds, 'IN')->condition('node.type', 'feed_item', '=');
    
    //Adds where condition to query
    $query->add_where(1, $condition);
    
    //Gets the current locktime
    $result = db_query("SELECT field_lock_date_time_value
                      FROM field_revision_field_lock_date_time 
                      WHERE entity_id=(SELECT MAX(entity_id) 
                                       FROM field_revision_field_lock_date_time)");
    
    //Checks if there was a locktime returned
    if($dt = $result->fetchObject()) {
        
        //Checks if the locktime has passed yet
        if(strtotime('now') < strtotime($dt->field_lock_date_time_value)) {
            
            //Adds a condition to ensure that no course event shows in the calendar
         //   $condition = db_or()->condition('node.nid', $arrayOfIds, 'NOT IN')->condition('node.type', 'feed_item', '=');
    
          //  $query->add_where(2, $condition);
            
        }
        
    }
    
  }
  
}

/**
 * Implements hook_form_alter
 * 
 * Modifies form elements based on the form id
 */ 
function custom_form_alter(&$form, &$form_state, $form_id) {
    
    //Checks if form is the lock date form
    if ($form_id == "manager_lock_date_time_node_form") {
        
        //Hides the title
        $form['title']['#type'] = 'hidden';
        
        $form['title']['#value'] = "Lock Time";
        
        //Changes the default submit button text
        $form['actions']['submit']['#value'] = 'Set Lock Time';
        
    }
    
    //Checks if form is the search node form
    else if ($form_id == "search_node_form") {
        
        //Hides the title
        $form['title']['#type'] = 'hidden';
        
        //Changes save buttom name to search
        $form['actions']['submit']['#value'] = 'Search rooms';  
        
    }
  
}

/**
 * Inserts the class(es) that have already been published and are being contested
 * by the confilcting class(es). Inserts these classes into the collision table
 * of the database. 
 */
 
function insert_other_collided_class($room_name, $room_id, $course_name, $course_id, $start_date, $end_date, $bypassLock) {
    
    //Get the current user object
    global $user;
    
    //Get the room's status 
    $current_status = getStatus($course_name, $course_id, $room_id, $start_date, $end_date, $bypassLock);

    //Get the user's user id
    $uid = (int)$user->uid;
    
    //If current status returns Booked, a collision is made and the published courses are inserted into the db
    if($current_status == "Booked") {
        
        //Gets the published courses that the new event is conflicting with
        $res = db_query("SELECT node.uid, node.nid, user.name, courseName.field_course_names_value, courseID.field_course_id_value, time.field_time_value, time.field_time_value2
                         FROM node AS node
                         JOIN field_data_field_roomname AS room ON node.nid = room.entity_id
                         JOIN field_data_field_time AS time ON node.nid = time.entity_id
						 JOIN users AS user ON node.uid = user.uid
						 JOIN field_data_field_course_names AS courseName ON node.nid = courseName.entity_id
						 JOIN field_data_field_course_id AS courseID ON node.nid = courseID.entity_id
                         WHERE node.status = 1
                         AND node.type = 'submit_room_request'
                         AND room.field_roomname_tid = $room_id
                         AND ((('$start_date' >= time.field_time_value
    	                 AND '$start_date' <= time.field_time_value2)
      	                 OR ('$end_date' <= time.field_time_value2
    	                 AND '$end_date' >= time.field_time_value))
    	                 OR ('$start_date' <= time.field_time_value 
    	                 AND '$end_date' >= time.field_time_value2))
    	                 ORDER BY node.nid");
        
        //Inserts each course into collision table
        while($fetch_data = $res->fetchObject()) {
            
            //Gets the user id  for staff that created the published event
			$main_uid = $fetch_data->uid;
			
			//Gets the node id for the published event
			$main_nid = $fetch_data->nid;
			
			//If the collision id has not yet been set then creates it for this conflict
			if(!(isset($collision_id))) {
			    
			    //Combines the the first published class in the conflict with the number 
			    //of published classes in the conflict
			    $collision_id = $main_nid . '-' . $res->rowCount();

			}
			
			//Gets the username for the staff that created the published event
			$main_username = $fetch_data->name;
					
			//Get the published event course name
			$main_course_name = $fetch_data->field_course_names_value;
			
			//Get the published event course id
			$main_course_id = $fetch_data->field_course_id_value;
			
			//Get the published event start date
			$main_start_date = $fetch_data->field_time_value;
			
			//Get the published event end date
			$main_end_date = $fetch_data->field_time_value2;
			
			//Creates a flag to ensure published event has not already been added to collision
			$enter_flag = false;
			
			//Selects the collision id and node id of all published events in collision
			$stmt1 = db_query("SELECT collision_id, nid 
			                   FROM collision 
			                   WHERE flag = 1");
			
			while($data = $stmt1->fetchObject()) {
				
				//For each published event in collision checks if it is the same collision as the current	
				if ($main_nid == $data->nid && $collision_id == $data->collision_id) {
			        
					$enter_flag = true;
			
				}
				
			}
		    
		    //If the published event has not been inserted then insert it
			if (!$enter_flag) {
		   
				$sql = "INSERT INTO collision (CRN, user_id, user_name, course_name, room_name, room_id, start_time, end_time, collision_id, nid, flag) VALUES ($main_course_id, $main_uid, '$main_username', '$main_course_name', '$room_name', $room_id, '$main_start_date', '$main_end_date', '$collision_id', '$main_nid', 1)";
				
				$result = db_query($sql);
			  
			}
			
		}
		
		return $collision_id;
		
    }
    
}

/**
 * Creates and saves a new node for the new event. 
 */

function create_save_new_node($room_name, $room_id, $course_name, $course_id, $start_date, $end_date, $collision_id, $bypassLock) {

    //Get the current user object
    global $user;
  
    //Get the room's status 
    $current_status = getStatus($course_name, $course_id, $room_id, $start_date, $end_date, $bypassLock);
    
    //Make sure room has not already been scheduled by similar event
    if($current_status != 'Already Scheduled') {
    
        //Builds new node piece by piece
        $newNode = new stdClass();
      
        //Sets node type to submit_room_request
        $newNode->type = 'submit_room_request';
        
        node_object_prepare($newNode);
        
        //Sets title to course name combined with crn
        $newNode->title = "$course_name-$course_id";
        
        //Sets the uid to the uid of the user that created the event
        $newNode->uid = $user->uid;
        
        //Sets created and last changed times
        $newNode->created = strtotime("now");
      
        $newNode->changed = strtotime("now");
        
        //If the room is not available then creates node as unpublished
        if ($current_status != 'Available') {
        
            //Sets node to unpublished
        
            $newNode->status = 0;
    
        }
        
        //If the room is available publishes the node
        else {
        
            //Sets node to published
        
            $newNode->status = 1;
        
            drupal_set_message("Successfully requested $room_name");
        
        }
    
        $newNode->comment = 2; // This node can create and view comments
      
        $newNode->promote = 0;
      
        $newNode->moderate = 0;
      
        $newNode->sticky = 0;
      
        $newNode->language = 'und';
      
        $newNode->field_roomname['und'][0]['tid']= $room_id;
      
        //Determines room type for filtering purposes
        if($room_name != 'Off Campus') {
      
            $newNode->field_room_type_for_filter['und'][0]['value'] = trim((explode("-",$room_name)[1]));;
      
        }
      
        else {
          
          $newNode->field_room_type_for_filter['und'][0]['value'] = $room_name;
          
        }
      
        $newNode->field_time['und'][0]['value']= $start_date;
      
        $newNode->field_time['und'][0]['value2']= $end_date;
      
        $newNode->field_course_names['und'][0]['value'] = $course_name;
      
        $newNode->field_course_id['und'][0]['value'] = $course_id;
      
        node_save($newNode);
      
        $user_id = $newNode->uid;
        
        //Checks for collisions in already "Booked" rooms
      
        if($current_status == 'Booked') {
          
            $res = db_query("SELECT name from users where uid = $user_id");
                
            if($data = $res->fetchObject()) {
                
                $user_name = $data->name;
                
                $enter_flag = false;
				
			    $stmt1 = db_query("SELECT CRN, start_time, end_time, collision_id
			                       FROM collision 
			                       WHERE flag = 0
			                       AND collision_id = '$collision_id'");
				
			    while($fetch_data = $stmt1->fetchObject()) {

					if ($course_id == $fetch_data->CRN && strtotime($start_date) == strtotime($fetch_data->start_time) && strtotime($end_date) == strtotime($fetch_data->end_time)) {
			            
					    $enter_flag = true;
			
				    }
				
			    }
			    
			    //Add the collision to the database and display collision message
			    if(!$enter_flag) {
            
                    $sql = "INSERT INTO collision (CRN, user_id, user_name, course_name, room_name, room_id, start_time, end_time, collision_id, nid, flag) VALUES ($course_id, $user_id, '$user_name', '$course_name', '$room_name', $room_id, '$start_date', '$end_date', '$collision_id', $newNode->nid, 0)";
                
                    $result = db_query($sql);
                
                    drupal_set_message("Conflict with $room_name. Manager will resolve this conflict", 'warning');
            
                    drupal_set_message("$room_name will show up in your calendar after your request is accepted. Go to Conflicts for more details", 'warning');
                
			    }
			    
			    else {
			        
			        drupal_set_message("Event already registered as a conflict", 'warning');
			        
			    }
			    
            }
            
            else {
                
                drupal_set_message("Could not get user name", 'error');
                
            }   
            
       }
        //Determines if request is made after the lock time
        else if($current_status == 'Locked') {
        
            $res = db_query("SELECT name from users where uid = $user_id");
                
            if($data = $res->fetchObject()) {
                
                $user_name = $data->name;
            
                $sql = "INSERT INTO REQUESTS (nid, user_id, user_name, CRN, course_name, room_name, room_id, start_time, end_time) VALUES ($newNode->nid, $user_id, '$user_name', $course_id, '$course_name', '$room_name', $room_id, '$start_date', '$end_date')";
            
                $result = db_query($sql);
            
                drupal_set_message("$room_name is currently locked. Manager will handle this request", 'warning');
            
            }
      
        }
        
    }
    //Room is already booked for this class at this time
    else {
        
        drupal_set_message("Room already scheduled for this class", 'warning');
        
    }
    
}


/**
 * Creates the new event. 
 */
function create_event($room_name, $room_id, $course_name, $course_id, $start_date, $end_date, $bypassLock = FALSE) {

    $collision_id = insert_other_collided_class($room_name, $room_id, $course_name, $course_id, $start_date, $end_date, $bypassLock);

    create_save_new_node($room_name, $room_id, $course_name, $course_id, $start_date, $end_date, $collision_id, $bypassLock);
    
}

?>