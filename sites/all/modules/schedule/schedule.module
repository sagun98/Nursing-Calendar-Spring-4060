<?php

function schedule_form($form, $form_state) {

  $timezone= drupal_get_user_timezone();

  $course = $_SESSION['Selected-Course'];
    
  $crns = get_crns_by_course(array($_SESSION['Selected-Course']));
    
  //$crns = array_merge(array($course . '-All' => $course . '-All'), $crns);
    
  $res = db_query("SELECT name, tid FROM taxonomy_term_data");
    
  while($data = $res->fetchObject()){
     
    $rooms[$data->name . '~' . $data->tid] =  $data->name;
      
  }
    
  $form['courses'] = array(
		  
	  '#type' => 'checkboxes',
			
		'#title' => t('Select CRN(s)'),
		  
		'#options' => $crns,
		
		'#required' => TRUE,
			
		'#validated' => TRUE,
		
	);
	
	$form['check-all'] = array(
    
    '#type' => 'checkbox',
    
    '#title' =>  t('Select all CRNs for ' . $course),
    
    '#attributes' => array('onclick' => 'checkUncheckAll(this);'),
    
  );
		
	$form['rooms'] = array(
		  
	  '#type' => 'select',
		  
	  '#title' => t('Select Room'),
		  
		'#options' => $rooms,
		
		'#validated' => TRUE,
		  
	);
	
  $form['start_date'] = array(
  
    '#type' => 'date_popup',
  
    '#title' => t('Start Time'),
  
    '#default_value' => date("Y-m-d H:i", round(strtotime("now") / 900) * 900),
  
    '#date_format' => 'Y-m-d H:i',
  
    '#date_label_position' => 'within',
    
    '#date_timezone' => $timezone,
    
    '#date_increment' => 15,
    
    '#date_year_range' => '-3:+3',
    
    // Use 'timepicker' option provided by the Date Popup Timepicker module.
    // #timepicker property itself is provided by the Date Popup module.
    '#timepicker' => 'timepicker',
    
    // New #timepicker_options property handled by the Date Popup Timepicker
    // module and lets to customize timepicker options.
    '#timepicker_options' => array(
    
      'rows' => 4,
    
      'minutes' => array(
    
      'starts' => 0,
    
      'ends' => 55,
    
      'interval' => 5,
    
      ),
    
      'showCloseButton' => TRUE,
    
      'closeButtonText' => t('Close'),
    
    ),
          
  );
    
  $form['end_date'] = array(
    
    '#type' => 'date_popup',
  
    '#title' => t('End Time'),
  
    '#default_value' => date("Y-m-d H:i", round(strtotime("+1 hour") / 900) * 900),
  
    '#date_format' => "H:i",
  
    '#date_label_position' => 'within',
  
    '#date_timezone' => $timezone,
  
    '#required' => TRUE,
  
    '#date_increment' => 15,
  
    '#date_year_range' => '-3:+3',
  
    '#timepicker' => 'timepicker',
  
    '#timepicker_options' => array(
  
      'rows' => 4,
  
      'minutes' => array(
  
        'starts' => 0,
  
        'ends' => 55,
  
        'interval' => 5,
  
      ),
  
      'showCloseButton' => TRUE,
  
      'closeButtonText' => t('Close'),
  
    ),
      
  );
  
  $form['repeat'] = array(
    
    '#type' => 'checkbox',
    
    '#title' => t('Repeat Event?'),
    
  );
  
  $form['repeat-until'] = array(
  
    '#type' => 'date_popup',
    
    '#states' => array(

      // Hide the settings when the cancel notify checkbox is disabled.

      'visible' => array(

       ':input[name="repeat"]' => array(
         
         'checked' => TRUE
         
         ),
       
      ),
      
    ),
  
    '#title' => t('Repeat Until'),
  
    '#default_value' => date("Y-m-d h:i", round(strtotime("now") / 900) * 900),
  
    '#date_format' => 'Y-m-d',
  
    '#date_label_position' => 'within',
    
    '#date_timezone' => $timezone,
    
    '#date_increment' => 15,
    
    '#date_year_range' => '-3:+3',
    
    // Use 'timepicker' option provided by the Date Popup Timepicker module.
    // #timepicker property itself is provided by the Date Popup module.
    '#timepicker' => 'timepicker',
    
    // New #timepicker_options property handled by the Date Popup Timepicker
    // module and lets to customize timepicker options.
    '#timepicker_options' => array(
    
      'rows' => 4,
    
      'minutes' => array(
    
      'starts' => 0,
    
      'ends' => 55,
    
      'interval' => 5,
    
      ),
    
      'showCloseButton' => TRUE,
    
      'closeButtonText' => t('Close'),
    
    ),
          
  );
  
  $form['book-room'] = array(
  
    '#type' => 'submit',
  
    '#value' => t('Book Room'),
  
  );
  
  $form['close'] = array(

    '#type' => 'submit',
  
    '#value' => t('Close'),
    
    '#submit' => array('schedule_form_close'),
    
  );
      
  if (!empty($form_state['results_table'])) {
  
      $form['results_table'] = array('#markup' => $form_state['results_table']);
    
  }
  
  return $form;
  
}

function check_room_status($form, $form_state) {
  
  $conflicts = repeatCheckStatus($course_name, $course_id, explode("~", $form_state['values']['rooms'])[1], $form_state['values']['start_date'], $form_state['values']['end_date'], $form_state['values']['repeat-until']); 
  
}

function repeat_event_until($course_name, $course_id, $room_name, $room_id, $start_time, $end_time, $until_date) {
  
  $until_date = date('Y-m-d H:i', strtotime($until_date . ' ' . explode(' ', $end_time)[1]));
  
  while($start_time <= $until_date) {

    create_event($room_name, $room_id, $course_name, $course_id, $start_time, $end_time);
  
    $start_time = date('Y-m-d H:i', strtotime("+7 day", strtotime($start_time)));
    
    $end_time = date('Y-m-d H:i', strtotime("+7 day", strtotime($end_time)));

  }
  
}

function schedule_form_close($form, &$form_state) {
  
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
  
}

function schedule_form_submit($form, &$form_state) {
  
	$roomParts = explode("~", $form_state['values']['rooms']);
	
  foreach($form_state['values']['courses'] as $course) {
    
    if($course) {
  	      
    	$course_parts = explode("-", $course);
    	
    	$end_time = date('Y-m-d H:i', strtotime(explode(' ', $form_state['values']['start_date'])[0] . ' ' . $form_state['values']['end_date']));
    	
    	if($form_state['values']['start_date'] <= $end_time) {
    	
      	if($form_state['values']['repeat']) {
      	
          repeat_event_until($course_parts[0], $course_parts[1], $roomParts[0], $roomParts[1], $form_state['values']['start_date'], $form_state['values']['end_date'], $form_state['values']['repeat-until']);
      	
      	}
      	
      	else {
      	  
      	  create_event($roomParts[0], $roomParts[1], $course_parts[0], $course_parts[1], $form_state['values']['start_date'], $end_time);
      	  
    	  }
    	
    	}
    	
    	else {
    	  
    	  drupal_set_message('Start date is greater than end date!', 'warning');
    	  
    	}
    	
    }
    
  }
	
  $form_state['rebuild'] = TRUE;
  
}

function repeatCheckStatus($course_name, $course_id, $room_id, $start_date, $end_date, $until_date) {
  
  $until_date = date('Y-m-d H:i', strtotime($until_date . ' ' . $end_date));
  
  $end_date = date('Y-m-d H:i', strtotime(explode(' ', $start_date)[0] . ' ' . $end_date));
  
  $date = date('Y-m-d', strtotime(explode(' ', $start_date)[0]));
  
  $conflicts = array();

  while($start_date <= $until_date) {
    
    $start_time = explode(' ', $start_date)[1];
    
    $end_time = explode(' ', $end_date)[1];
    
    $current_status = getStatus($course_name, $course_id, $room_id, $start_date, $end_date);
    
    if($current_status == 'Booked') {
     
      $conflicts = "This room is booked on $date from $start_time to $end_time.";
      
    }
    
    else if($current_status == 'Locked') {
      
      $conflicts = "Scheduling is locked, a request will be submitted for $date from $start_time to $end_time.";
      
    }
    
    else if($current_status == 'Available') {
      
      $conflicts = "Available on $date from $start_time to $end_time.";
      
    }
  
    $start_date = date('Y-m-d H:i', strtotime("+7 day", strtotime($start_date)));
    
    $end_date = date('Y-m-d H:i', strtotime("+7 day", strtotime($end_date)));

  }
  
  return $conflicts;
  
}

?>