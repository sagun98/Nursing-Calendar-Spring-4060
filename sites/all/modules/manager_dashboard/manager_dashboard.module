<?php

function manager_dashboard_menu() {
  $items = array();
  $items['manager/dashboard'] = array(
    'title' => 'Manager Dashboard',
    'description' => 'A dashboard for managers',
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('manager_dashboard_form'), //put the name of the form here
    'access arguments' => array('view_collision_dashboard'),
  );
  
  // For the default local task, we need very little configuration, as the
  // callback and other conditions are handled by the parent callback.
  $items['manager/dashboard/default'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Collisions',
    'description' => 'A dashboard for Manager',
    'access arguments' => array('view_collision_dashboard'),
    'weight' => 1,
    
  );
  
  $items['manager/dashboard/lead-selection'] = array( //this creates a URL that will call this form at "examples/form-example"
    'type' => MENU_LOCAL_TASK,
    'title' => 'Lead Selection', //page title
    'description' => 'A dashboard for staff displaying all the collisions',
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('lead_selection_form'), //put the name of the form here
    'access arguments' => array('lead_selection'),
    'weight' => 2,  
    
  );
  
  return $items;
}

function render_manager_calendar() {

  $my_view_name = 'manger_calendar_view';
  
  $my_display_name = 'manager_calendar_view';

  $my_view = views_get_view($my_view_name);
  
  if ( is_object($my_view) ) { 
    
  $my_view->set_display($my_display_name);
  
  $my_view->pre_execute();
  
  return $my_view->render($my_display_name);
  }
}

function manager_dashboard_form($form, &$form_state) {
  $form_state['results_table'] = collided_classroom_sort($form_state);
  $form_state['rebuild'] = TRUE;
     if (!empty($form_state['results_table'])) {
      $form['results_table'] = array('#markup' => $form_state['results_table']);
  }
  return $form;
}

function managerd_dashboard_alter($form, &$form_state) {
 
}

function collided_classroom_sort(&$form_state){
  drupal_set_message(t('Hitting Accept will delete other classes and publish the Accepted class.<br>
  However, an email will be sent notifying other users that their classes has been rejected.'), 'warning');
  $output="";
    global $user;
    $rows=array();
    $header= array("Room Name", "Start Date","End Date","Course Name", "Status","User", "CRN");
    $res = db_query("SELECT * FROM collision where flag=1");
    while($data = $res->fetchObject()){
      $collision_id = $data->collision_id;
	    $sec = db_query("SELECT * FROM collision where flag = 1 AND collision_id = '$collision_id'");
      while ($dd = $sec->fetchObject()){ 
      $rows[] = array(
		    $dd -> room_name,
		    $dd -> start_time,
		    $dd -> end_time, 
		    $dd -> course_name,
		    "Published",
		    $dd-> user_name,
		    $dd->CRN,
  );
      }
	    $col = db_query("SELECT * FROM collision where collision_id = '$collision_id' and flag=0 ");
      while($coll = $col->fetchObject()){
         $rows[] = array(
		     "\t",
		     "\t",
		      l(
              t("Accept"), 
              '/manager/redirect', 
              array(
                'attributes' => array(
                  'class' => array(
                    'request', 
                    'request-redirect',
                  ), 
                  'id' =>'request',
                ),
                'query' => array(
                  'room_name' => $coll->room_name,
                  'start_date' => $coll->start_time, 
                  'end_date' => $coll ->end_time,
                  'course_name' => $coll -> course_name,
                  'course_id' => $coll->CRN,
                  'uid' => $coll ->user_id,
                  'collision_id' => $coll-> collision_id,
                ), 
                'html' => TRUE,
                )
              ),
		     $coll -> course_name, 
		     "Conflict",
		     $coll -> user_name,
		     $coll->CRN,
  );
      }
    }

   $output .= theme_table(
		    array(
		      "header" => $header,
		      "rows" => $rows,
		      "attributes" => array(""),
		      "sticky" => false, // Table header will be sticky
		      "caption" => "",
		      "colgroups" => array(),
		      "empty" => t("Table has no data!") // The message to be displayed if table is empty
		    )
	  );
	  return $output;
}


?>